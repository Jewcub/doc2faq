{"version":3,"sources":["components/QAndA.js","components/Section.js","App.js","reportWebVitals.js","index.js"],"names":["QAndA","className","question","answers","map","answer","i","console","log","dangerouslySetInnerHTML","__html","Section","section","name","QAndAs","qAndA","App","useState","faqHTML","setFaqHTML","start","a","process","fetch","faqReq","json","data","JSON","parse","faq","useEffect","sections","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OACe,SAASA,EAAT,GAA2B,IAAVA,EAAS,EAATA,MAC9B,OACE,gCACE,oBAAIC,UAAU,WAAd,SAA0BD,EAAME,WAC/BF,EAAMG,QAAQC,KAAI,SAACC,EAAQC,GAE1B,OADAC,QAAQC,IAAI,SAAUH,GAEpB,qBAEEJ,UAAU,SACVQ,wBAAyB,CAAEC,OAAQL,IAF9BC,SCPF,SAASK,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QAChC,OACE,gCACE,oBAAIX,UAAU,gBAAd,SAA+BW,EAAQC,OACtCD,EAAQE,OAAOV,KAAI,SAACW,EAAOT,GAAR,OAClB,cAAC,EAAD,CAAeN,MAAOe,GAAVT,SCsBLU,MA1Bf,WAAgB,IAAD,EACiBC,mBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,KAEPC,EAAK,uCAAG,8BAAAC,EAAA,6DACZd,QAAQC,IAAI,aAAcc,cAC1BH,EAAW,qBAFC,SAGSI,MAAM,gBAHf,cAGNC,EAHM,gBAIOA,EAAOC,OAJd,OAINC,EAJM,OAKZnB,QAAQC,IAAI,CAAEkB,SACdP,EAAWQ,KAAKC,MAAMF,EAAKG,MAC3BtB,QAAQC,IAAI,CAAEU,YAPF,4CAAH,qDAYX,OAHAY,qBAAU,WACRV,MACC,IAED,sBAAKnB,UAAU,MAAf,UACE,2CACCiB,EAAQa,SACLb,EAAQa,SAAS3B,KAAI,SAACQ,EAASN,GAAV,OACnB,cAACK,EAAD,CAAiBC,QAASA,GAAZN,MAEhB,kBCZK0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.10fa3c0f.chunk.js","sourcesContent":["import React from \"react\";\nexport default function QAndA({ QAndA }) {\n  return (\n    <div>\n      <h3 className=\"question\">{QAndA.question}</h3>\n      {QAndA.answers.map((answer, i) => {\n        console.log(\"answer\", answer);\n        return (\n          <div\n            key={i}\n            className=\"answer\"\n            dangerouslySetInnerHTML={{ __html: answer }}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport QAndA from \"./QAndA\";\nexport default function Section({ section }) {\n  return (\n    <div>\n      <h2 className=\"section-title\">{section.name}</h2>\n      {section.QAndAs.map((qAndA, i) => (\n        <QAndA key={i} QAndA={qAndA}></QAndA>\n      ))}\n    </div>\n  );\n}\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Section from \"./components/Section\";\nfunction App() {\n  const [faqHTML, setFaqHTML] = useState(0);\n  const start = async () => {\n    console.log(\"NODE_ENV: \", process.env.NODE_ENV);\n    setFaqHTML(`<p>loading...</p>`);\n    const faqReq = await fetch(\"/api/get-faq\");\n    const data = await faqReq.json();\n    console.log({ data });\n    setFaqHTML(JSON.parse(data.faq));\n    console.log({ faqHTML });\n  };\n  useEffect(() => {\n    start();\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1> KAVA FAQ</h1>\n      {faqHTML.sections\n        ? faqHTML.sections.map((section, i) => (\n            <Section key={i} section={section}></Section>\n          ))\n        : \"loading....\"}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}